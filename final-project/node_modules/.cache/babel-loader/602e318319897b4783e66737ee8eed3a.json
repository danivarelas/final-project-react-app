{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/web-dev-program/week 7/final-project/src/pages/NewTransfer/NewTransfer.js\";\nimport React, { useState, useEffect } from 'react';\nimport { useCookies } from 'react-cookie';\nimport { useHistory } from 'react-router-dom';\nimport validate from '../../utils/JWTParser';\nimport Navbar from '../../components/Navbar/Navbar';\nimport Axios from 'axios';\nimport './NewTransfer.scss';\n\nconst NewTransfer = () => {\n  const history = useHistory();\n  const [description, setDescription] = useState(\"\");\n  const [amount, setAmount] = useState(\"\");\n  const [sourceAccountNumber, setSourceAccountNumber] = useState();\n  const [targetAccountNumber, setTargetAccountNumber] = useState(\"\");\n  const [accounts, setAccounts] = useState([]);\n  const [invalidAmount, setInvalidAmount] = useState(false);\n  const [sameAccountt, setSameAccount] = useState(false);\n  const [invalidAccount, setInvalidAccount] = useState(false);\n  const [cookies] = useCookies(['JWT']);\n\n  if (!validate(cookies.JWT)) {\n    history.push(\"/login\");\n  }\n\n  useEffect(() => {\n    let claims = validate(cookies.JWT);\n    Axios.get(`http://localhost:8081/api/v1/account/byUserId/${claims.id}`, {\n      headers: {\n        JWT: cookies.JWT\n      }\n    }).then(res => {\n      const {\n        data\n      } = res;\n      setAccounts(data);\n      setSourceAccountNumber(data[0].accountNumber);\n    }).catch(e => {});\n  }, [invalidAmount, invalidAccount, cookies]);\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    if (sourceAccountNumber !== targetAccountNumber) {\n      setSameAccount(false);\n      const validAmount = await checkAmount();\n      const validAccount = await checkAccount(targetAccountNumber);\n\n      if (!validAmount || !validAccount) {\n        validAmount ? setInvalidAmount(false) : setInvalidAmount(true);\n        validAccount ? setInvalidAccount(false) : setInvalidAccount(true);\n      } else {\n        const sourceAccountId = await checkAccount(sourceAccountNumber);\n        const targetAccountId = await checkAccount(targetAccountNumber); //console.log(sourceAccountId)\n        //console.log(targetAccountId)\n\n        const transfer = {\n          transferNumber: Math.floor(Math.random() * 1000000000 + 1),\n          transferDescription: description,\n          amount: amount,\n          transferDate: new Date(),\n          sourceAccountId: sourceAccountId.id,\n          targetAccountId: targetAccountId.id\n        };\n        console.log(transfer);\n        /*Axios.post(`http://localhost:8081/api/v1/transfer`, transfer, {\n            headers: {JWT: cookies.JWT}\n        })\n            .then(res => {\n                history.goBack();\n            }).catch(e => {\n                console.log(e);\n            });*/\n      }\n    } else {\n      setInvalidAccount(false);\n      setSameAccount(true);\n    }\n  };\n\n  const checkAmount = async () => {\n    if (amount > 0) {\n      let res = await Axios.get(`http://localhost:8081/api/v1/account/${sourceAccountNumber}`, {\n        headers: {\n          JWT: cookies.JWT\n        }\n      });\n      const {\n        data\n      } = res;\n      console.log(data);\n      console.log(amount);\n\n      if (data.balance < amount) {\n        return false;\n      }\n\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  const checkAccount = async number => {\n    let res = await Axios.get(`http://localhost:8081/api/v1/account/${number}`, {\n      headers: {\n        JWT: cookies.JWT\n      }\n    });\n    return res.data.accountNumber ? res.data : null;\n  };\n\n  const handleCancel = () => {\n    history.goBack();\n  };\n\n  const handleSourceAccount = event => {\n    setSourceAccountNumber(event.target.value);\n  };\n\n  const handleDescription = event => {\n    setDescription(event.target.value);\n  };\n\n  const handleAmount = event => {\n    setAmount(event.target.value);\n  };\n\n  const handleTargetAccount = event => {\n    setTargetAccountNumber(event.target.value);\n  };\n\n  return React.createElement(\"div\", {\n    className: \"wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    id: \"content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, React.createElement(Navbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"block-section container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"block-section-header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    className: \"block-section-header-text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, \"New Transfer\")), React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, \"Source Account\"), React.createElement(\"select\", {\n    className: \"form-control\",\n    id: \"source-account\",\n    onChange: handleSourceAccount,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, accounts.map((account, index) => {\n    if (index === 0) {\n      return React.createElement(\"option\", {\n        key: account.id,\n        value: account.accountNumber,\n        selected: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, account.accountNumber + \" - \" + account.balance + \" \" + account.currency);\n    } else {\n      return React.createElement(\"option\", {\n        key: account.id,\n        value: account.accountNumber,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, account.accountNumber + \" - \" + account.balance + \" \" + account.currency);\n    }\n  }))), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, \"Description\"), React.createElement(\"input\", {\n    className: \"form-control\",\n    type: \"text\",\n    required: true,\n    onChange: handleDescription,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  }, \"Amount\"), React.createElement(\"input\", {\n    className: \"form-control\",\n    type: \"number\",\n    required: true,\n    onChange: handleAmount,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }), invalidAmount && React.createElement(\"div\", {\n    className: \"invalid-entry\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, \"You have insufficient funds.\")), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }, \"Target Account\"), React.createElement(\"input\", {\n    className: \"form-control\",\n    type: \"text\",\n    required: true,\n    onChange: handleTargetAccount,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }), invalidAccount && React.createElement(\"div\", {\n    className: \"invalid-entry\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }, \"This account doesn't exist.\"), sameAccountt && React.createElement(\"div\", {\n    className: \"invalid-entry\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, \"You can't transfer funds to the same account.\")), React.createElement(\"button\", {\n    type: \"cancel\",\n    className: \"btn btn-danger\",\n    onClick: handleCancel,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175\n    },\n    __self: this\n  }, \"Cancel\"), React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"btn btn-success\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }, \"Transfer\")))));\n};\n\nexport default NewTransfer;","map":{"version":3,"sources":["/Users/user/Desktop/web-dev-program/week 7/final-project/src/pages/NewTransfer/NewTransfer.js"],"names":["React","useState","useEffect","useCookies","useHistory","validate","Navbar","Axios","NewTransfer","history","description","setDescription","amount","setAmount","sourceAccountNumber","setSourceAccountNumber","targetAccountNumber","setTargetAccountNumber","accounts","setAccounts","invalidAmount","setInvalidAmount","sameAccountt","setSameAccount","invalidAccount","setInvalidAccount","cookies","JWT","push","claims","get","id","headers","then","res","data","accountNumber","catch","e","handleSubmit","preventDefault","validAmount","checkAmount","validAccount","checkAccount","sourceAccountId","targetAccountId","transfer","transferNumber","Math","floor","random","transferDescription","transferDate","Date","console","log","balance","number","handleCancel","goBack","handleSourceAccount","event","target","value","handleDescription","handleAmount","handleTargetAccount","map","account","index","currency"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,oBAAP;;AAEA,MAAMC,WAAW,GAAG,MAAM;AAEtB,QAAMC,OAAO,GAAGL,UAAU,EAA1B;AAEA,QAAM,CAACM,WAAD,EAAcC,cAAd,IAAgCV,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACW,MAAD,EAASC,SAAT,IAAsBZ,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACa,mBAAD,EAAsBC,sBAAtB,IAAgDd,QAAQ,EAA9D;AACA,QAAM,CAACe,mBAAD,EAAsBC,sBAAtB,IAAgDhB,QAAQ,CAAC,EAAD,CAA9D;AAEA,QAAM,CAACiB,QAAD,EAAWC,WAAX,IAA0BlB,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACmB,aAAD,EAAgBC,gBAAhB,IAAoCpB,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAM,CAACqB,YAAD,EAAeC,cAAf,IAAiCtB,QAAQ,CAAC,KAAD,CAA/C;AACA,QAAM,CAACuB,cAAD,EAAiBC,iBAAjB,IAAsCxB,QAAQ,CAAC,KAAD,CAApD;AAEA,QAAM,CAACyB,OAAD,IAAYvB,UAAU,CAAC,CAAC,KAAD,CAAD,CAA5B;;AAEA,MAAI,CAACE,QAAQ,CAACqB,OAAO,CAACC,GAAT,CAAb,EAA4B;AACxBlB,IAAAA,OAAO,CAACmB,IAAR,CAAa,QAAb;AACH;;AAED1B,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI2B,MAAM,GAAGxB,QAAQ,CAACqB,OAAO,CAACC,GAAT,CAArB;AACApB,IAAAA,KAAK,CAACuB,GAAN,CAAW,iDAAgDD,MAAM,CAACE,EAAG,EAArE,EAAwE;AACpEC,MAAAA,OAAO,EAAE;AAAEL,QAAAA,GAAG,EAAED,OAAO,CAACC;AAAf;AAD2D,KAAxE,EAEGM,IAFH,CAEQC,GAAG,IAAI;AACX,YAAM;AAAEC,QAAAA;AAAF,UAAWD,GAAjB;AACAf,MAAAA,WAAW,CAACgB,IAAD,CAAX;AACApB,MAAAA,sBAAsB,CAACoB,IAAI,CAAC,CAAD,CAAJ,CAAQC,aAAT,CAAtB;AACH,KAND,EAMGC,KANH,CAMSC,CAAC,IAAI,CAEb,CARD;AASH,GAXQ,EAWN,CAAClB,aAAD,EAAgBI,cAAhB,EAAgCE,OAAhC,CAXM,CAAT;;AAaA,QAAMa,YAAY,GAAG,MAAOD,CAAP,IAAa;AAC9BA,IAAAA,CAAC,CAACE,cAAF;;AACA,QAAI1B,mBAAmB,KAAKE,mBAA5B,EAAiD;AAC7CO,MAAAA,cAAc,CAAC,KAAD,CAAd;AAEA,YAAMkB,WAAW,GAAG,MAAMC,WAAW,EAArC;AACA,YAAMC,YAAY,GAAG,MAAMC,YAAY,CAAC5B,mBAAD,CAAvC;;AAEA,UAAI,CAACyB,WAAD,IAAgB,CAACE,YAArB,EAAmC;AAC/BF,QAAAA,WAAW,GAAGpB,gBAAgB,CAAC,KAAD,CAAnB,GAA6BA,gBAAgB,CAAC,IAAD,CAAxD;AACAsB,QAAAA,YAAY,GAAGlB,iBAAiB,CAAC,KAAD,CAApB,GAA8BA,iBAAiB,CAAC,IAAD,CAA3D;AACH,OAHD,MAGO;AACH,cAAMoB,eAAe,GAAG,MAAMD,YAAY,CAAC9B,mBAAD,CAA1C;AACA,cAAMgC,eAAe,GAAG,MAAMF,YAAY,CAAC5B,mBAAD,CAA1C,CAFG,CAGH;AACA;;AACA,cAAM+B,QAAQ,GAAG;AACbC,UAAAA,cAAc,EAAEC,IAAI,CAACC,KAAL,CAAYD,IAAI,CAACE,MAAL,KAAgB,UAAjB,GAA+B,CAA1C,CADH;AAEbC,UAAAA,mBAAmB,EAAE1C,WAFR;AAGbE,UAAAA,MAAM,EAAEA,MAHK;AAIbyC,UAAAA,YAAY,EAAE,IAAIC,IAAJ,EAJD;AAKbT,UAAAA,eAAe,EAAEA,eAAe,CAACd,EALpB;AAMbe,UAAAA,eAAe,EAAEA,eAAe,CAACf;AANpB,SAAjB;AAQAwB,QAAAA,OAAO,CAACC,GAAR,CAAYT,QAAZ;AACA;;;;;;;;AAQH;AACJ,KAhCD,MAgCO;AACHtB,MAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACAF,MAAAA,cAAc,CAAC,IAAD,CAAd;AACH;AACJ,GAtCD;;AAwCA,QAAMmB,WAAW,GAAG,YAAY;AAC5B,QAAI9B,MAAM,GAAG,CAAb,EAAgB;AACZ,UAAIsB,GAAG,GAAG,MAAM3B,KAAK,CAACuB,GAAN,CAAW,wCAAuChB,mBAAoB,EAAtE,EAAyE;AACrFkB,QAAAA,OAAO,EAAE;AACLL,UAAAA,GAAG,EAAED,OAAO,CAACC;AADR;AAD4E,OAAzE,CAAhB;AAKA,YAAM;AAAEQ,QAAAA;AAAF,UAAWD,GAAjB;AACAqB,MAAAA,OAAO,CAACC,GAAR,CAAYrB,IAAZ;AACAoB,MAAAA,OAAO,CAACC,GAAR,CAAY5C,MAAZ;;AACA,UAAIuB,IAAI,CAACsB,OAAL,GAAe7C,MAAnB,EAA2B;AACvB,eAAO,KAAP;AACH;;AACD,aAAO,IAAP;AACH,KAbD,MAaO;AACH,aAAO,KAAP;AACH;AACJ,GAjBD;;AAmBA,QAAMgC,YAAY,GAAG,MAAOc,MAAP,IAAkB;AACnC,QAAIxB,GAAG,GAAG,MAAM3B,KAAK,CAACuB,GAAN,CAAW,wCAAuC4B,MAAO,EAAzD,EAA4D;AACxE1B,MAAAA,OAAO,EAAE;AACLL,QAAAA,GAAG,EAAED,OAAO,CAACC;AADR;AAD+D,KAA5D,CAAhB;AAKA,WAAOO,GAAG,CAACC,IAAJ,CAASC,aAAT,GAAyBF,GAAG,CAACC,IAA7B,GAAoC,IAA3C;AACH,GAPD;;AASA,QAAMwB,YAAY,GAAG,MAAM;AAAElD,IAAAA,OAAO,CAACmD,MAAR;AAAmB,GAAhD;;AAEA,QAAMC,mBAAmB,GAAGC,KAAK,IAAI;AACjC/C,IAAAA,sBAAsB,CAAC+C,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAtB;AACH,GAFD;;AAIA,QAAMC,iBAAiB,GAAGH,KAAK,IAAI;AAC/BnD,IAAAA,cAAc,CAACmD,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAd;AACH,GAFD;;AAIA,QAAME,YAAY,GAAGJ,KAAK,IAAI;AAC1BjD,IAAAA,SAAS,CAACiD,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAT;AACH,GAFD;;AAIA,QAAMG,mBAAmB,GAAGL,KAAK,IAAI;AACjC7C,IAAAA,sBAAsB,CAAC6C,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAtB;AACH,GAFD;;AAIA,SACI;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,EAAE,EAAC,SAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI;AAAK,IAAA,SAAS,EAAC,yBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAI,IAAA,SAAS,EAAC,2BAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,CADJ,EAII;AAAM,IAAA,QAAQ,EAAEzB,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,EAEI;AAAQ,IAAA,SAAS,EAAC,cAAlB;AAAiC,IAAA,EAAE,EAAC,gBAApC;AAAqD,IAAA,QAAQ,EAAEsB,mBAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK3C,QAAQ,CAACkD,GAAT,CAAa,CAACC,OAAD,EAAUC,KAAV,KAAoB;AAC9B,QAAIA,KAAK,KAAK,CAAd,EAAiB;AACb,aAAO;AAAQ,QAAA,GAAG,EAAED,OAAO,CAACtC,EAArB;AAAyB,QAAA,KAAK,EAAEsC,OAAO,CAACjC,aAAxC;AAAuD,QAAA,QAAQ,MAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACFiC,OAAO,CAACjC,aAAR,GAAwB,KAAxB,GAAgCiC,OAAO,CAACZ,OAAxC,GAAkD,GAAlD,GAAwDY,OAAO,CAACE,QAD9D,CAAP;AAGH,KAJD,MAIO;AACH,aAAO;AAAQ,QAAA,GAAG,EAAEF,OAAO,CAACtC,EAArB;AAAyB,QAAA,KAAK,EAAEsC,OAAO,CAACjC,aAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACFiC,OAAO,CAACjC,aAAR,GAAwB,KAAxB,GAAgCiC,OAAO,CAACZ,OAAxC,GAAkD,GAAlD,GAAwDY,OAAO,CAACE,QAD9D,CAAP;AAGH;AACJ,GAVA,CADL,CAFJ,CADJ,EAkBI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADJ,EAEI;AAAO,IAAA,SAAS,EAAC,cAAjB;AAAgC,IAAA,IAAI,EAAC,MAArC;AAA4C,IAAA,QAAQ,MAApD;AAAqD,IAAA,QAAQ,EAAEN,iBAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CAlBJ,EAsBI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAEI;AAAO,IAAA,SAAS,EAAC,cAAjB;AAAgC,IAAA,IAAI,EAAC,QAArC;AAA8C,IAAA,QAAQ,MAAtD;AAAuD,IAAA,QAAQ,EAAEC,YAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAGK9C,aAAa,IACV;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAJR,CAtBJ,EA6BI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,EAEI;AAAO,IAAA,SAAS,EAAC,cAAjB;AAAgC,IAAA,IAAI,EAAC,MAArC;AAA4C,IAAA,QAAQ,MAApD;AAAqD,IAAA,QAAQ,EAAE+C,mBAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAGK3C,cAAc,IACX;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAJR,EAMKF,YAAY,IACT;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDAPR,CA7BJ,EAuCI;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,SAAS,EAAC,gBAAhC;AAAiD,IAAA,OAAO,EAAEqC,YAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAvCJ,EAwCI;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,SAAS,EAAC,iBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAxCJ,CAJJ,CAFJ,CADJ,CADJ;AAwDH,CA/KD;;AAiLA,eAAenD,WAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useCookies } from 'react-cookie';\nimport { useHistory } from 'react-router-dom';\nimport validate from '../../utils/JWTParser';\nimport Navbar from '../../components/Navbar/Navbar';\nimport Axios from 'axios';\nimport './NewTransfer.scss';\n\nconst NewTransfer = () => {\n\n    const history = useHistory();\n\n    const [description, setDescription] = useState(\"\");\n    const [amount, setAmount] = useState(\"\");\n    const [sourceAccountNumber, setSourceAccountNumber] = useState();\n    const [targetAccountNumber, setTargetAccountNumber] = useState(\"\");\n\n    const [accounts, setAccounts] = useState([]);\n    const [invalidAmount, setInvalidAmount] = useState(false);\n    const [sameAccountt, setSameAccount] = useState(false);\n    const [invalidAccount, setInvalidAccount] = useState(false);\n\n    const [cookies] = useCookies(['JWT']);\n\n    if (!validate(cookies.JWT)) {\n        history.push(\"/login\");\n    }\n\n    useEffect(() => {\n        let claims = validate(cookies.JWT);\n        Axios.get(`http://localhost:8081/api/v1/account/byUserId/${claims.id}`, {\n            headers: { JWT: cookies.JWT }\n        }).then(res => {\n            const { data } = res;\n            setAccounts(data);\n            setSourceAccountNumber(data[0].accountNumber)\n        }).catch(e => {\n\n        });\n    }, [invalidAmount, invalidAccount, cookies]);\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        if (sourceAccountNumber !== targetAccountNumber) {\n            setSameAccount(false);\n\n            const validAmount = await checkAmount();\n            const validAccount = await checkAccount(targetAccountNumber);\n\n            if (!validAmount || !validAccount) {\n                validAmount ? setInvalidAmount(false) : setInvalidAmount(true);\n                validAccount ? setInvalidAccount(false) : setInvalidAccount(true);\n            } else {\n                const sourceAccountId = await checkAccount(sourceAccountNumber);\n                const targetAccountId = await checkAccount(targetAccountNumber);\n                //console.log(sourceAccountId)\n                //console.log(targetAccountId)\n                const transfer = {\n                    transferNumber: Math.floor((Math.random() * 1000000000) + 1),\n                    transferDescription: description,\n                    amount: amount,\n                    transferDate: new Date(),\n                    sourceAccountId: sourceAccountId.id,\n                    targetAccountId: targetAccountId.id\n                }\n                console.log(transfer)\n                /*Axios.post(`http://localhost:8081/api/v1/transfer`, transfer, {\n                    headers: {JWT: cookies.JWT}\n                })\n                    .then(res => {\n                        history.goBack();\n                    }).catch(e => {\n                        console.log(e);\n                    });*/\n            }\n        } else {\n            setInvalidAccount(false);\n            setSameAccount(true);\n        }\n    }\n\n    const checkAmount = async () => {\n        if (amount > 0) {\n            let res = await Axios.get(`http://localhost:8081/api/v1/account/${sourceAccountNumber}`, {\n                headers: {\n                    JWT: cookies.JWT,\n                }\n            })\n            const { data } = res;\n            console.log(data)\n            console.log(amount)\n            if (data.balance < amount) {\n                return false;\n            }\n            return true;\n        } else {\n            return false;\n        }\n    };\n\n    const checkAccount = async (number) => {\n        let res = await Axios.get(`http://localhost:8081/api/v1/account/${number}`, {\n            headers: {\n                JWT: cookies.JWT,\n            }\n        })\n        return res.data.accountNumber ? res.data : null;\n    };\n\n    const handleCancel = () => { history.goBack(); }\n\n    const handleSourceAccount = event => {\n        setSourceAccountNumber(event.target.value);\n    };\n\n    const handleDescription = event => {\n        setDescription(event.target.value);\n    };\n\n    const handleAmount = event => {\n        setAmount(event.target.value);\n    };\n\n    const handleTargetAccount = event => {\n        setTargetAccountNumber(event.target.value);\n    };\n\n    return (\n        <div className=\"wrapper\">\n            <div id=\"content\">\n                <Navbar />\n                <div className=\"block-section container\">\n                    <div className=\"block-section-header\">\n                        <h3 className=\"block-section-header-text\">New Transfer</h3>\n                    </div>\n                    <form onSubmit={handleSubmit}>\n                        <div className=\"form-group\">\n                            <label>Source Account</label>\n                            <select className=\"form-control\" id=\"source-account\" onChange={handleSourceAccount}>\n                                {accounts.map((account, index) => {\n                                    if (index === 0) {\n                                        return <option key={account.id} value={account.accountNumber} selected>\n                                            {account.accountNumber + \" - \" + account.balance + \" \" + account.currency}\n                                        </option>;\n                                    } else {\n                                        return <option key={account.id} value={account.accountNumber}>\n                                            {account.accountNumber + \" - \" + account.balance + \" \" + account.currency}\n                                        </option>;\n                                    }\n                                })}\n                            </select>\n\n                        </div>\n                        <div className=\"form-group\">\n                            <label>Description</label>\n                            <input className=\"form-control\" type=\"text\" required onChange={handleDescription} />\n                        </div>\n                        <div className=\"form-group\">\n                            <label>Amount</label>\n                            <input className=\"form-control\" type=\"number\" required onChange={handleAmount} />\n                            {invalidAmount &&\n                                <div className=\"invalid-entry\">You have insufficient funds.</div>\n                            }\n                        </div>\n                        <div className=\"form-group\">\n                            <label>Target Account</label>\n                            <input className=\"form-control\" type=\"text\" required onChange={handleTargetAccount} />\n                            {invalidAccount &&\n                                <div className=\"invalid-entry\">This account doesn't exist.</div>\n                            }\n                            {sameAccountt &&\n                                <div className=\"invalid-entry\">You can't transfer funds to the same account.</div>\n                            }\n                        </div>\n                        <button type=\"cancel\" className=\"btn btn-danger\" onClick={handleCancel}>Cancel</button>\n                        <button type=\"submit\" className=\"btn btn-success\">Transfer</button>\n                        \n                    </form>\n                </div>\n            </div>\n        </div>\n    );\n\n}\n\nexport default NewTransfer;"]},"metadata":{},"sourceType":"module"}