{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/web-dev-program/week 7/final-project/src/components/PaymentsChart/PaymentsChart.js\";\nimport React, { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport validate from '../../utils/JWTParser';\nimport Chart from 'chart.js';\nimport { PieChart, Pie, Sector, Cell, ResponsiveContainer, Legend } from 'recharts';\n\nconst PaymentsChart = props => {\n  const history = useHistory();\n  const [chartCells, setChartCells] = useState([]);\n  const {\n    serviceTypes,\n    services,\n    payments,\n    chartId,\n    isUSD\n  } = props; //const [currentDate, setCurrentDate] = useState(new Date());\n\n  if (!validate(sessionStorage.getItem('JWT'))) {\n    history.push(\"/login\");\n  }\n\n  useEffect(() => {\n    if (serviceTypes) {\n      let valuesCRC = [serviceTypes.length];\n      let valuesUSD = [serviceTypes.length];\n      let titles = [serviceTypes.length];\n\n      for (var i = 0; i < serviceTypes.length; i++) {\n        valuesCRC[i] = 0;\n        valuesUSD[i] = 0;\n        titles[i] = serviceTypes[i].serviceTypeName;\n      }\n\n      let paymentsInCRC = [];\n      let paymentsInUSD = [];\n\n      if (payments) {\n        paymentsInCRC = payments.filter(payment => payment.currency === \"CRC\");\n        paymentsInUSD = payments.filter(payment => payment.currency === \"USD\");\n        var j = 0;\n\n        if (paymentsInCRC && paymentsInCRC.length) {\n          for (j = 0; j < paymentsInCRC.length; j++) {\n            let payment = paymentsInCRC[j];\n            let amount = parseFloat(payment.amount);\n            let serviceTypeId = services.filter(service => payment.serviceId === service.id);\n            serviceTypeId = serviceTypeId[0];\n\n            if (serviceTypeId) {\n              serviceTypeId = serviceTypeId.serviceTypeId;\n              valuesCRC[serviceTypeId - 1] = valuesCRC[serviceTypeId - 1] + amount;\n            }\n          }\n        }\n\n        if (paymentsInUSD && paymentsInUSD.length) {\n          for (j = 0; j < paymentsInUSD.length; j++) {\n            let payment = paymentsInUSD[j];\n            let amount = parseFloat(payment.amount);\n            let serviceTypeId = services.filter(service => payment.serviceId === service.id);\n            serviceTypeId = serviceTypeId[0];\n\n            if (serviceTypeId) {\n              serviceTypeId = serviceTypeId.serviceTypeId;\n              valuesUSD[serviceTypeId - 1] = valuesUSD[serviceTypeId - 1] + amount;\n            }\n          }\n        }\n      }\n\n      let data2 = isUSD ? valuesUSD : valuesCRC;\n      let colors = ['rgba(255, 99, 132, 0.8)', 'rgba(54, 162, 235, 0.8)', 'rgba(255, 206, 86, 0.8)', 'rgba(75, 192, 192, 0.8)', 'rgba(153, 102, 255, 0.8)', 'rgba(255, 159, 64, 0.8)'];\n      const data = [{\n        name: titles[0],\n        value: data2[0]\n      }, {\n        name: titles[1],\n        value: data2[1]\n      }, {\n        name: titles[2],\n        value: data2[2]\n      }, {\n        name: titles[3],\n        value: data2[3]\n      }, {\n        name: titles[4],\n        value: data2[4]\n      }, {\n        name: titles[5],\n        value: data2[5]\n      }];\n      console.log(data);\n      setChartCells(data);\n    }\n  }, [chartId, isUSD, payments, serviceTypes, services]);\n  const styleLegend = {\n    top: 0\n  };\n  return React.createElement(ResponsiveContainer, {\n    width: \"100%\",\n    height: \"85%\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, React.createElement(PieChart, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, React.createElement(Pie, {\n    data: chartCells,\n    dataKey: \"value\",\n    nameKey: \"name\",\n    cx: \"50%\",\n    cy: \"60%\",\n    innerRadius: 30,\n    outerRadius: 80,\n    fill: \"#82ca9d\",\n    label: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }), React.createElement(Legend, {\n    iconSize: 10,\n    layout: \"horizontal\",\n    verticalAlign: \"top\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  })));\n};\n\nexport default PaymentsChart; //<canvas id={chartId}></canvas>","map":{"version":3,"sources":["/Users/user/Desktop/web-dev-program/week 7/final-project/src/components/PaymentsChart/PaymentsChart.js"],"names":["React","useState","useEffect","useHistory","validate","Chart","PieChart","Pie","Sector","Cell","ResponsiveContainer","Legend","PaymentsChart","props","history","chartCells","setChartCells","serviceTypes","services","payments","chartId","isUSD","sessionStorage","getItem","push","valuesCRC","length","valuesUSD","titles","i","serviceTypeName","paymentsInCRC","paymentsInUSD","filter","payment","currency","j","amount","parseFloat","serviceTypeId","service","serviceId","id","data2","colors","data","name","value","console","log","styleLegend","top"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport validate from '../../utils/JWTParser';\nimport Chart from 'chart.js';\nimport {\n    PieChart, Pie, Sector, Cell, ResponsiveContainer, Legend,\n} from 'recharts';\n\nconst PaymentsChart = (props) => {\n\n    const history = useHistory();\n\n    const [chartCells, setChartCells] = useState([]);\n\n    const { serviceTypes, services, payments, chartId, isUSD } = props;\n    //const [currentDate, setCurrentDate] = useState(new Date());\n\n    if (!validate(sessionStorage.getItem('JWT'))) {\n        history.push(\"/login\");\n    }\n\n    useEffect(() => {\n        if (serviceTypes) {\n            let valuesCRC = [serviceTypes.length];\n            let valuesUSD = [serviceTypes.length];\n            let titles = [serviceTypes.length];\n            for (var i = 0; i < serviceTypes.length; i++) {\n                valuesCRC[i] = 0;\n                valuesUSD[i] = 0;\n                titles[i] = serviceTypes[i].serviceTypeName;\n            }\n            let paymentsInCRC = [];\n            let paymentsInUSD = [];\n            if (payments) {\n                paymentsInCRC = payments.filter((payment) => payment.currency === \"CRC\");\n                paymentsInUSD = payments.filter((payment) => payment.currency === \"USD\");\n                var j = 0;\n\n                if (paymentsInCRC && paymentsInCRC.length) {\n                    for (j = 0; j < paymentsInCRC.length; j++) {\n                        let payment = paymentsInCRC[j];\n                        let amount = parseFloat(payment.amount);\n                        let serviceTypeId = services.filter((service) => payment.serviceId === service.id);\n                        serviceTypeId = serviceTypeId[0];\n                        if (serviceTypeId) {\n                            serviceTypeId = serviceTypeId.serviceTypeId;\n                            valuesCRC[serviceTypeId - 1] = valuesCRC[serviceTypeId - 1] + amount;\n                        }\n                    }\n                }\n\n                if (paymentsInUSD && paymentsInUSD.length) {\n                    for (j = 0; j < paymentsInUSD.length; j++) {\n                        let payment = paymentsInUSD[j];\n                        let amount = parseFloat(payment.amount);\n                        let serviceTypeId = services.filter((service) => payment.serviceId === service.id);\n                        serviceTypeId = serviceTypeId[0];\n                        if (serviceTypeId) {\n                            serviceTypeId = serviceTypeId.serviceTypeId;\n                            valuesUSD[serviceTypeId - 1] = valuesUSD[serviceTypeId - 1] + amount;\n                        }\n                    }\n                }\n            }\n\n            let data2 = isUSD ? valuesUSD : valuesCRC;\n            let colors = ['rgba(255, 99, 132, 0.8)', 'rgba(54, 162, 235, 0.8)', 'rgba(255, 206, 86, 0.8)', 'rgba(75, 192, 192, 0.8)', 'rgba(153, 102, 255, 0.8)', 'rgba(255, 159, 64, 0.8)']\n\n\n            const data = [\n                { name: titles[0], value: data2[0] },\n                { name: titles[1], value: data2[1] },\n                { name: titles[2], value: data2[2] },\n                { name: titles[3], value: data2[3] },\n                { name: titles[4], value: data2[4] },\n                { name: titles[5], value: data2[5] }\n            ];\n            console.log(data)\n            setChartCells(data);\n            \n\n        }\n\n    }, [chartId, isUSD, payments, serviceTypes, services]);\n\n    const styleLegend = {\n        top: 0\n    };\n\n    return (\n        <ResponsiveContainer width=\"100%\" height=\"85%\">\n            <PieChart >\n                <Pie data={chartCells} dataKey=\"value\" nameKey=\"name\" cx=\"50%\" cy=\"60%\" innerRadius={30} outerRadius={80} fill=\"#82ca9d\" label/>\n                <Legend iconSize={10} layout=\"horizontal\" verticalAlign=\"top\" />\n            </PieChart>\n        </ResponsiveContainer>\n\n    );\n\n}\n\nexport default PaymentsChart;\n\n//<canvas id={chartId}></canvas>"]},"metadata":{},"sourceType":"module"}