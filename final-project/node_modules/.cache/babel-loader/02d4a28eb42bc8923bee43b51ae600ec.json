{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/web-dev-program/week 7/final-project/src/pages/NewServicePayment/NewServicePayment.js\";\nimport React, { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport validate from '../../utils/JWTParser';\nimport Navbar from '../../components/Navbar/Navbar';\nimport Axios from 'axios';\nimport emailjs from 'emailjs-com';\n\nconst NewServicePayment = () => {\n  const history = useHistory();\n  const [description, setDescription] = useState(\"\");\n  const [amount, setAmount] = useState(\"\");\n  const [accountNumber, setAccountNumber] = useState(\"\");\n  const [serviceId, setServiceId] = useState(\"\");\n  const [accounts, setAccounts] = useState([]);\n  const [services, setServices] = useState([]);\n  const [invalidAmount, setInvalidAmount] = useState(false);\n  const [insufficientFunds, setInsufficientFunds] = useState(false);\n\n  if (!validate(sessionStorage.getItem('JWT'))) {\n    history.push(\"/login\");\n  }\n\n  useEffect(() => {\n    const token = sessionStorage.getItem('JWT');\n    const claims = validate(token);\n\n    if (claims) {\n      Axios.get(`http://localhost:8081/api/v1/account/byUserId/${claims.id}`, {\n        headers: {\n          JWT: token\n        }\n      }).then(res => {\n        const {\n          data\n        } = res;\n        setAccounts(data);\n        setAccountNumber(data[0].accountNumber);\n      }).catch(e => {});\n      Axios.get(`http://localhost:8081/api/v1/service`, {\n        headers: {\n          JWT: token\n        }\n      }).then(res => {\n        const {\n          data\n        } = res;\n        console.log(data);\n        setServices(data);\n        setServiceId(data[0].id);\n      }).catch(e => {});\n    }\n  }, []);\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setInsufficientFunds(false);\n    const token = sessionStorage.getItem('JWT');\n    const claims = validate(token);\n    const validAmount = checkAmount();\n\n    if (!validAmount) {\n      validAmount ? setInvalidAmount(false) : setInvalidAmount(true);\n    } else {\n      const account = await checkAccount(accountNumber);\n      const payment = {\n        paymentNumber: Math.floor(Math.random() * 100000000 + 1000000000),\n        paymentDescription: description,\n        amount: amount,\n        currency: account.currency,\n        paymentDate: new Date(),\n        userId: claims.id,\n        accountId: account.id,\n        serviceId: serviceId\n      };\n      console.log(payment);\n      Axios.post(`http://localhost:8081/api/v1/payment`, payment, {\n        headers: {\n          JWT: token\n        }\n      }).then(res => {\n        const {\n          data\n        } = res;\n        console.log(data); //emailjs.send('gmail', 'template_8HJ8XF0v', templateParams, 'user_ykN9aw27EcEhXClqMft4o');\n\n        history.goBack();\n      }).catch(e => {\n        console.log(e);\n        setInsufficientFunds(true);\n      });\n    }\n  };\n\n  const checkAmount = () => {\n    if (amount > 0) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  const checkAccount = async number => {\n    let res = await Axios.get(`http://localhost:8081/api/v1/account/${number}`, {\n      headers: {\n        JWT: sessionStorage.getItem('JWT')\n      }\n    });\n    return res.data.accountNumber ? res.data : null;\n  };\n\n  const handleCancel = () => {\n    history.goBack();\n  };\n\n  const handleAccount = event => {\n    setAccountNumber(event.target.value);\n  };\n\n  const handleService = event => {\n    setServiceId(event.target.value);\n  };\n\n  const handleDescription = event => {\n    setDescription(event.target.value);\n  };\n\n  const handleAmount = event => {\n    setAmount(event.target.value);\n  };\n\n  return React.createElement(\"div\", {\n    className: \"wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    id: \"content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, React.createElement(Navbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"block-section container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"block-section-header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    className: \"block-section-header-text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, \"Pay Services\")), React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, \"Source Account\"), React.createElement(\"select\", {\n    className: \"form-control\",\n    id: \"source-account\",\n    onChange: handleAccount,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, accounts.map((account, index) => {\n    if (index === 0) {\n      return React.createElement(\"option\", {\n        key: account.id,\n        value: account.accountNumber,\n        selected: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, account.accountNumber + \" - \" + account.balance + \" \" + account.currency);\n    } else {\n      return React.createElement(\"option\", {\n        key: account.id,\n        value: account.accountNumber,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, account.accountNumber + \" - \" + account.balance + \" \" + account.currency);\n    }\n  }))), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, \"Service\"), React.createElement(\"select\", {\n    className: \"form-control\",\n    id: \"service\",\n    onChange: handleService,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }, services.map((service, index) => {\n    if (index === 0) {\n      return React.createElement(\"option\", {\n        key: service.id,\n        value: service.id,\n        selected: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, service.serviceName);\n    } else {\n      return React.createElement(\"option\", {\n        key: service.id,\n        value: service.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, service.serviceName);\n    }\n  }))), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }, \"Description\"), React.createElement(\"input\", {\n    className: \"form-control\",\n    type: \"text\",\n    required: true,\n    onChange: handleDescription,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }, \"Amount\"), React.createElement(\"input\", {\n    className: \"form-control\",\n    type: \"number\",\n    required: true,\n    step: \"0.01\",\n    onChange: handleAmount,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }), React.createElement(\"small\", {\n    id: \"passwordHelpBlock\",\n    className: \"form-text text-muted\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }, \"The amount has to be specified in the source account currency.\"), invalidAmount && React.createElement(\"div\", {\n    className: \"invalid-entry\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }, \"You have to specify an amount greater than zero.\"), insufficientFunds && React.createElement(\"div\", {\n    className: \"invalid-entry\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177\n    },\n    __self: this\n  }, \"You have insufficient funds.\")), React.createElement(\"button\", {\n    type: \"cancel\",\n    className: \"btn btn-danger\",\n    onClick: handleCancel,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }, \"Cancel\"), React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"btn btn-success\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  }, \"Pay\")))));\n};\n\nexport default NewServicePayment;","map":{"version":3,"sources":["/Users/user/Desktop/web-dev-program/week 7/final-project/src/pages/NewServicePayment/NewServicePayment.js"],"names":["React","useState","useEffect","useHistory","validate","Navbar","Axios","emailjs","NewServicePayment","history","description","setDescription","amount","setAmount","accountNumber","setAccountNumber","serviceId","setServiceId","accounts","setAccounts","services","setServices","invalidAmount","setInvalidAmount","insufficientFunds","setInsufficientFunds","sessionStorage","getItem","push","token","claims","get","id","headers","JWT","then","res","data","catch","e","console","log","handleSubmit","preventDefault","validAmount","checkAmount","account","checkAccount","payment","paymentNumber","Math","floor","random","paymentDescription","currency","paymentDate","Date","userId","accountId","post","goBack","number","handleCancel","handleAccount","event","target","value","handleService","handleDescription","handleAmount","map","index","balance","service","serviceName"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport validate from '../../utils/JWTParser';\nimport Navbar from '../../components/Navbar/Navbar';\nimport Axios from 'axios';\nimport emailjs from 'emailjs-com';\n\nconst NewServicePayment = () => {\n\n    const history = useHistory();\n\n    const [description, setDescription] = useState(\"\");\n    const [amount, setAmount] = useState(\"\");\n    const [accountNumber, setAccountNumber] = useState(\"\");\n    const [serviceId, setServiceId] = useState(\"\");\n\n    const [accounts, setAccounts] = useState([]);\n    const [services, setServices] = useState([]);\n    const [invalidAmount, setInvalidAmount] = useState(false);\n    const [insufficientFunds, setInsufficientFunds] = useState(false);\n\n    if (!validate(sessionStorage.getItem('JWT'))) {\n        history.push(\"/login\");\n    }\n\n    useEffect(() => {\n        const token = sessionStorage.getItem('JWT');\n        const claims = validate(token);\n        if (claims) {\n            Axios.get(`http://localhost:8081/api/v1/account/byUserId/${claims.id}`, {\n                headers: { JWT: token }\n            }).then(res => {\n                const { data } = res;\n                setAccounts(data);\n                setAccountNumber(data[0].accountNumber);\n            }).catch(e => {\n\n            });\n            Axios.get(`http://localhost:8081/api/v1/service`, {\n                headers: { JWT: token }\n            }).then(res => {\n                const { data } = res;\n                console.log(data)\n                setServices(data);\n                setServiceId(data[0].id);\n            }).catch(e => {\n\n            });\n        }\n    }, []);\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        setInsufficientFunds(false);\n\n        const token = sessionStorage.getItem('JWT');\n        const claims = validate(token);\n        const validAmount = checkAmount();\n\n        if (!validAmount) {\n            validAmount ? setInvalidAmount(false) : setInvalidAmount(true);\n        } else {\n            const account = await checkAccount(accountNumber);\n\n            const payment = {\n                paymentNumber: Math.floor((Math.random() * 100000000) + 1000000000),\n                paymentDescription: description,\n                amount: amount,\n                currency: account.currency,\n                paymentDate: new Date(),\n                userId: claims.id,\n                accountId: account.id,\n                serviceId: serviceId\n            }\n\n            console.log(payment)\n\n            Axios.post(`http://localhost:8081/api/v1/payment`, payment, {\n                headers: { JWT: token }\n            }).then(res => {\n                const {data} = res;\n                console.log(data)\n                \n                //emailjs.send('gmail', 'template_8HJ8XF0v', templateParams, 'user_ykN9aw27EcEhXClqMft4o');\n                history.goBack();\n            }).catch(e => {\n                console.log(e);\n                setInsufficientFunds(true);\n            });\n        }\n    }\n\n    const checkAmount = () => {\n        if (amount > 0) {\n            return true;\n        } else {\n            return false;\n        }\n    };\n\n    const checkAccount = async (number) => {\n        let res = await Axios.get(`http://localhost:8081/api/v1/account/${number}`, {\n            headers: { JWT: sessionStorage.getItem('JWT') }\n        })\n        return res.data.accountNumber ? res.data : null;\n    };\n\n    const handleCancel = () => { history.goBack(); }\n\n    const handleAccount = event => {\n        setAccountNumber(event.target.value);\n    };\n\n    const handleService = event => {\n        setServiceId(event.target.value);\n    };\n\n    const handleDescription = event => {\n        setDescription(event.target.value);\n    };\n\n    const handleAmount = event => {\n        setAmount(event.target.value);\n    };\n\n    return (\n        <div className=\"wrapper\">\n            <div id=\"content\">\n                <Navbar />\n                <div className=\"block-section container\">\n                    <div className=\"block-section-header\">\n                        <h3 className=\"block-section-header-text\">Pay Services</h3>\n                    </div>\n                    <form onSubmit={handleSubmit}>\n                        <div className=\"form-group\">\n                            <label>Source Account</label>\n                            <select className=\"form-control\" id=\"source-account\" onChange={handleAccount}>\n                                {accounts.map((account, index) => {\n                                    if (index === 0) {\n                                        return <option key={account.id} value={account.accountNumber} selected>\n                                            {account.accountNumber + \" - \" + account.balance + \" \" + account.currency}\n                                        </option>;\n                                    } else {\n                                        return <option key={account.id} value={account.accountNumber}>\n                                            {account.accountNumber + \" - \" + account.balance + \" \" + account.currency}\n                                        </option>;\n                                    }\n                                })}\n                            </select>\n                        </div>\n                        <div className=\"form-group\">\n                            <label>Service</label>\n                            <select className=\"form-control\" id=\"service\" onChange={handleService}>\n                                {services.map((service, index) => {\n                                    if (index === 0) {\n                                        return <option key={service.id} value={service.id} selected>{service.serviceName}</option>;\n                                    } else {\n                                        return <option key={service.id} value={service.id}>{service.serviceName}</option>;\n                                    }\n                                })}\n                            </select>\n                        </div>\n                        <div className=\"form-group\">\n                            <label>Description</label>\n                            <input className=\"form-control\" type=\"text\" required onChange={handleDescription} />\n                        </div>\n                        <div className=\"form-group\">\n                            <label>Amount</label>\n                            <input className=\"form-control\" type=\"number\" required step=\"0.01\" onChange={handleAmount} />\n                            <small id=\"passwordHelpBlock\" className=\"form-text text-muted\">\n                                The amount has to be specified in the source account currency.\n                            </small>\n                            {invalidAmount &&\n                                <div className=\"invalid-entry\">You have to specify an amount greater than zero.</div>\n                            }\n                            {insufficientFunds &&\n                                <div className=\"invalid-entry\">You have insufficient funds.</div>\n                            }\n                        </div>\n\n                        <button type=\"cancel\" className=\"btn btn-danger\" onClick={handleCancel}>Cancel</button>\n                        <button type=\"submit\" className=\"btn btn-success\">Pay</button>\n\n                    </form>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default NewServicePayment;"]},"metadata":{},"sourceType":"module"}