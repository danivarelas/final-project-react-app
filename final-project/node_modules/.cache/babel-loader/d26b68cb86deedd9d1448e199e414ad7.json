{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/web-dev-program/week 7/final-project/src/components/PaymentsChart/PaymentsChart.js\";\nimport React, { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport validate from '../../utils/JWTParser';\nimport Chart from 'chart.js';\n\nvar CanvasJSReact = require('../canvasjs.react');\n\nvar CanvasJS = CanvasJSReact.CanvasJS;\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\n\nconst PaymentsChart = props => {\n  const history = useHistory();\n  const {\n    serviceTypes,\n    services,\n    payments,\n    chartId,\n    isUSD\n  } = props; //const [currentDate, setCurrentDate] = useState(new Date());\n\n  if (!validate(sessionStorage.getItem('JWT'))) {\n    history.push(\"/login\");\n  }\n\n  useEffect(() => {\n    if (serviceTypes) {\n      let valuesCRC = [serviceTypes.length];\n      let valuesUSD = [serviceTypes.length];\n      let titles = [serviceTypes.length];\n\n      for (var i = 0; i < serviceTypes.length; i++) {\n        valuesCRC[i] = 0;\n        valuesUSD[i] = 0;\n        titles[i] = serviceTypes[i].serviceTypeName;\n      }\n\n      let paymentsInCRC = [];\n      let paymentsInUSD = [];\n\n      if (payments) {\n        paymentsInCRC = payments.filter(payment => payment.currency === \"CRC\");\n        paymentsInUSD = payments.filter(payment => payment.currency === \"USD\");\n        var j = 0;\n\n        if (paymentsInCRC && paymentsInCRC.length) {\n          for (j = 0; j < paymentsInCRC.length; j++) {\n            let payment = paymentsInCRC[j];\n            let amount = parseFloat(payment.amount);\n            let serviceTypeId = services.filter(service => payment.serviceId === service.id);\n            serviceTypeId = serviceTypeId[0];\n\n            if (serviceTypeId) {\n              serviceTypeId = serviceTypeId.serviceTypeId;\n              valuesCRC[serviceTypeId - 1] = valuesCRC[serviceTypeId - 1] + amount;\n            }\n          }\n        }\n\n        if (paymentsInUSD && paymentsInUSD.length) {\n          for (j = 0; j < paymentsInUSD.length; j++) {\n            let payment = paymentsInUSD[j];\n            let amount = parseFloat(payment.amount);\n            let serviceTypeId = services.filter(service => payment.serviceId === service.id);\n            serviceTypeId = serviceTypeId[0];\n\n            if (serviceTypeId) {\n              serviceTypeId = serviceTypeId.serviceTypeId;\n              valuesUSD[serviceTypeId - 1] = valuesUSD[serviceTypeId - 1] + amount;\n            }\n          }\n        }\n      }\n\n      let data = isUSD ? valuesUSD : valuesCRC;\n      let colors = ['rgba(255, 99, 132, 0.8)', 'rgba(54, 162, 235, 0.8)', 'rgba(255, 206, 86, 0.8)', 'rgba(75, 192, 192, 0.8)', 'rgba(153, 102, 255, 0.8)', 'rgba(255, 159, 64, 0.8)'];\n      var context = document.getElementById(chartId); // var myChart = new Chart(context, {\n      //     type: 'doughnut',\n      //     data: {\n      //         labels: titles,\n      //         datasets: [{\n      //             label: 'Total',\n      //             data: data,\n      //             backgroundColor: colors\n      //         }]\n      //     },\n      //     options: { responsive: true}\n      // });\n    }\n  }, [chartId, isUSD, payments, serviceTypes, services]);\n  const options = {\n    animationEnabled: true,\n    exportEnabled: true,\n    theme: \"dark2\",\n    // \"light1\", \"dark1\", \"dark2\"\n    title: {\n      text: \"Trip Expenses\"\n    },\n    data: [{\n      type: \"pie\",\n      indexLabel: \"{label}: {y}%\",\n      startAngle: -90,\n      dataPoints: [{\n        y: 20,\n        label: \"Airfare\"\n      }, {\n        y: 24,\n        label: \"Food & Drinks\"\n      }, {\n        y: 20,\n        label: \"Accomodation\"\n      }, {\n        y: 14,\n        label: \"Transportation\"\n      }, {\n        y: 12,\n        label: \"Activities\"\n      }, {\n        y: 10,\n        label: \"Misc\"\n      }]\n    }]\n  };\n  return React.createElement(CanvasJSChart, {\n    options: options\n    /* onRef={ref => this.chart = ref} */\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  });\n};\n\nexport default PaymentsChart; //<canvas id={chartId}></canvas>","map":{"version":3,"sources":["/Users/user/Desktop/web-dev-program/week 7/final-project/src/components/PaymentsChart/PaymentsChart.js"],"names":["React","useState","useEffect","useHistory","validate","Chart","CanvasJSReact","require","CanvasJS","CanvasJSChart","PaymentsChart","props","history","serviceTypes","services","payments","chartId","isUSD","sessionStorage","getItem","push","valuesCRC","length","valuesUSD","titles","i","serviceTypeName","paymentsInCRC","paymentsInUSD","filter","payment","currency","j","amount","parseFloat","serviceTypeId","service","serviceId","id","data","colors","context","document","getElementById","options","animationEnabled","exportEnabled","theme","title","text","type","indexLabel","startAngle","dataPoints","y","label"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport validate from '../../utils/JWTParser';\nimport Chart from 'chart.js';\nvar CanvasJSReact = require('../canvasjs.react');\nvar CanvasJS = CanvasJSReact.CanvasJS;\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\n\nconst PaymentsChart = (props) => {\n\n    const history = useHistory();\n\n    const { serviceTypes, services, payments, chartId, isUSD } = props;\n    //const [currentDate, setCurrentDate] = useState(new Date());\n\n    if (!validate(sessionStorage.getItem('JWT'))) {\n        history.push(\"/login\");\n    }\n\n    useEffect(() => {\n        if (serviceTypes) {\n            let valuesCRC = [serviceTypes.length];\n            let valuesUSD = [serviceTypes.length];\n            let titles = [serviceTypes.length];\n            for (var i = 0; i < serviceTypes.length; i++) {\n                valuesCRC[i] = 0;\n                valuesUSD[i] = 0;\n                titles[i] = serviceTypes[i].serviceTypeName;\n            }\n            let paymentsInCRC = [];\n            let paymentsInUSD = [];\n            if (payments) {\n                paymentsInCRC = payments.filter((payment) => payment.currency === \"CRC\");\n                paymentsInUSD = payments.filter((payment) => payment.currency === \"USD\");\n                var j = 0;\n\n                if (paymentsInCRC && paymentsInCRC.length) {\n                    for (j = 0; j < paymentsInCRC.length; j++) {\n                        let payment = paymentsInCRC[j];\n                        let amount = parseFloat(payment.amount);\n                        let serviceTypeId = services.filter((service) => payment.serviceId === service.id);\n                        serviceTypeId = serviceTypeId[0];\n                        if (serviceTypeId) {\n                            serviceTypeId = serviceTypeId.serviceTypeId;\n                            valuesCRC[serviceTypeId - 1] = valuesCRC[serviceTypeId - 1] + amount;\n                        }\n                    }\n                }\n\n                if (paymentsInUSD && paymentsInUSD.length) {\n                    for (j = 0; j < paymentsInUSD.length; j++) {\n                        let payment = paymentsInUSD[j];\n                        let amount = parseFloat(payment.amount);\n                        let serviceTypeId = services.filter((service) => payment.serviceId === service.id);\n                        serviceTypeId = serviceTypeId[0];\n                        if (serviceTypeId) {\n                            serviceTypeId = serviceTypeId.serviceTypeId;\n                            valuesUSD[serviceTypeId - 1] = valuesUSD[serviceTypeId - 1] + amount;\n                        }\n                    }\n                }\n            }\n\n            let data = isUSD ? valuesUSD : valuesCRC;\n            let colors = ['rgba(255, 99, 132, 0.8)','rgba(54, 162, 235, 0.8)','rgba(255, 206, 86, 0.8)','rgba(75, 192, 192, 0.8)','rgba(153, 102, 255, 0.8)','rgba(255, 159, 64, 0.8)']\n            var context = document.getElementById(chartId);\n            // var myChart = new Chart(context, {\n            //     type: 'doughnut',\n            //     data: {\n            //         labels: titles,\n            //         datasets: [{\n            //             label: 'Total',\n            //             data: data,\n            //             backgroundColor: colors\n            //         }]\n            //     },\n            //     options: { responsive: true}\n            // });\n\n            \n\n        }\n\n    }, [chartId, isUSD, payments, serviceTypes, services]);\n\n    const options = {\n        animationEnabled: true,\n        exportEnabled: true,\n        theme: \"dark2\", // \"light1\", \"dark1\", \"dark2\"\n        title:{\n            text: \"Trip Expenses\"\n        },\n        data: [{\n            type: \"pie\",\n            indexLabel: \"{label}: {y}%\",\t\t\n            startAngle: -90,\n            dataPoints: [\n                { y: 20, label: \"Airfare\" },\n                { y: 24, label: \"Food & Drinks\" },\n                { y: 20, label: \"Accomodation\" },\n                { y: 14, label: \"Transportation\" },\n                { y: 12, label: \"Activities\" },\n                { y: 10, label: \"Misc\" }\t\n            ]\n        }]\n    }\n\n    return (\n        \n        <CanvasJSChart options = {options} \n\t\t\t\t/* onRef={ref => this.chart = ref} */\n\t\t\t/>\n    );\n\n}\n\nexport default PaymentsChart;\n\n//<canvas id={chartId}></canvas>"]},"metadata":{},"sourceType":"module"}