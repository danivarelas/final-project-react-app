{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/web-dev-program/week 7/final-project/src/pages/NewTransfer/NewTransfer.js\";\nimport React, { useState, useEffect } from 'react';\nimport { useCookies } from 'react-cookie';\nimport { useHistory } from 'react-router-dom';\nimport validate from '../../utils/JWTParser';\nimport Navbar from '../../components/Navbar/Navbar';\nimport Axios from 'axios';\nimport './NewTransfer.scss';\nimport { format } from 'date-fns';\n\nconst NewTransfer = () => {\n  const history = useHistory();\n  const [description, setDescription] = useState(\"\");\n  const [amount, setAmount] = useState(\"\");\n  const [sourceAccountNumber, setSourceAccountNumber] = useState(\"\");\n  const [targetAccountNumber, setTargetAccountNumber] = useState(\"\");\n  const [exchangeRates, setExchangeRates] = useState({});\n  const [accounts, setAccounts] = useState([]);\n  const [invalidAmount, setInvalidAmount] = useState(false);\n  const [insufficientFunds, setInsufficientFunds] = useState(false);\n  const [sameAccountt, setSameAccount] = useState(false);\n  const [invalidAccount, setInvalidAccount] = useState(false);\n  const [cookies] = useCookies(['JWT']);\n\n  if (!validate(cookies.JWT)) {\n    history.push(\"/login\");\n  }\n\n  useEffect(() => {\n    const claims = validate(cookies.JWT);\n\n    if (claims) {\n      Axios.get(`http://localhost:8081/api/v1/account/byUserId/${claims.id}`, {\n        headers: {\n          JWT: cookies.JWT\n        }\n      }).then(res => {\n        const {\n          data\n        } = res;\n        setAccounts(data);\n        setSourceAccountNumber(data[0].accountNumber);\n      }).catch(e => {});\n      let dateToday = new Date();\n      dateToday = format(dateToday, \"dd/MM/yyyy\");\n      Axios.get(`https://tipodecambio.paginasweb.cr/api/${dateToday}`).then(res => {\n        const {\n          data\n        } = res;\n        setExchangeRates(data);\n      });\n    }\n  }, [cookies]);\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    if (sourceAccountNumber !== targetAccountNumber) {\n      setSameAccount(false);\n      setInsufficientFunds(false);\n      const validAmount = checkAmount();\n      const validAccount = await checkAccount(targetAccountNumber);\n\n      if (!validAmount || !validAccount) {\n        validAmount ? setInvalidAmount(false) : setInvalidAmount(true);\n        validAccount ? setInvalidAccount(false) : setInvalidAccount(true);\n      } else {\n        const sourceAccount = await checkAccount(sourceAccountNumber);\n        const targetAccount = await checkAccount(targetAccountNumber);\n        const transfer = {\n          transferNumber: Math.floor(Math.random() * 100000000 + 1000000000),\n          transferDescription: description,\n          amount: amount,\n          transferDate: new Date(),\n          sourceAccountId: sourceAccount.id,\n          targetAccountId: targetAccount.id\n        };\n        const {\n          compra,\n          venta\n        } = exchangeRates;\n        Axios.post(`http://localhost:8081/api/v1/transfer?buy=${compra}&sell=${venta}`, transfer, {\n          headers: {\n            JWT: cookies.JWT\n          }\n        }).then(res => {\n          history.goBack();\n        }).catch(e => {\n          console.log(e);\n          setInsufficientFunds(true);\n        });\n      }\n    } else {\n      setInvalidAccount(false);\n      setSameAccount(true);\n    }\n  };\n\n  const checkAmount = () => {\n    if (amount > 0) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  const checkAccount = async number => {\n    let res = await Axios.get(`http://localhost:8081/api/v1/account/${number}`, {\n      headers: {\n        JWT: cookies.JWT\n      }\n    });\n    return res.data.accountNumber ? res.data : null;\n  };\n\n  const handleCancel = () => {\n    history.goBack();\n  };\n\n  const handleSourceAccount = event => {\n    setSourceAccountNumber(event.target.value);\n  };\n\n  const handleDescription = event => {\n    setDescription(event.target.value);\n  };\n\n  const handleAmount = event => {\n    setAmount(event.target.value);\n  };\n\n  const handleTargetAccount = event => {\n    setTargetAccountNumber(event.target.value);\n  };\n\n  return React.createElement(\"div\", {\n    className: \"wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    id: \"content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, React.createElement(Navbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"block-section container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"block-section-header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    className: \"block-section-header-text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, \"New Transfer\")), React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, \"Source Account\"), React.createElement(\"select\", {\n    className: \"form-control\",\n    id: \"source-account\",\n    onChange: handleSourceAccount,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, accounts.map((account, index) => {\n    if (index === 0) {\n      return React.createElement(\"option\", {\n        key: account.id,\n        value: account.accountNumber,\n        selected: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, account.accountNumber + \" - \" + account.balance + \" \" + account.currency);\n    } else {\n      return React.createElement(\"option\", {\n        key: account.id,\n        value: account.accountNumber,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, account.accountNumber + \" - \" + account.balance + \" \" + account.currency);\n    }\n  }))), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }, \"Description\"), React.createElement(\"input\", {\n    className: \"form-control\",\n    type: \"text\",\n    required: true,\n    onChange: handleDescription,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, \"Amount\"), React.createElement(\"input\", {\n    className: \"form-control\",\n    type: \"number\",\n    required: true,\n    step: \"0.01\",\n    onChange: handleAmount,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }), React.createElement(\"small\", {\n    id: \"passwordHelpBlock\",\n    className: \"form-text text-muted\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }, \"The amount has to be specified in the source account currency.\"), invalidAmount && React.createElement(\"div\", {\n    className: \"invalid-entry\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }, \"You have to specify an amount greater than zero.\"), insufficientFunds && React.createElement(\"div\", {\n    className: \"invalid-entry\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }, \"You have insufficient Funds.\")), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175\n    },\n    __self: this\n  }, \"Target Account\"), React.createElement(\"input\", {\n    className: \"form-control\",\n    type: \"text\",\n    required: true,\n    onChange: handleTargetAccount,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }), invalidAccount && React.createElement(\"div\", {\n    className: \"invalid-entry\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  }, \"This account doesn't exist.\"), sameAccountt && React.createElement(\"div\", {\n    className: \"invalid-entry\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }, \"You can't transfer funds to the same account.\")), React.createElement(\"button\", {\n    type: \"cancel\",\n    className: \"btn btn-danger\",\n    onClick: handleCancel,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }, \"Cancel\"), React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"btn btn-success\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185\n    },\n    __self: this\n  }, \"Transfer\")))));\n};\n\nexport default NewTransfer;","map":{"version":3,"sources":["/Users/user/Desktop/web-dev-program/week 7/final-project/src/pages/NewTransfer/NewTransfer.js"],"names":["React","useState","useEffect","useCookies","useHistory","validate","Navbar","Axios","format","NewTransfer","history","description","setDescription","amount","setAmount","sourceAccountNumber","setSourceAccountNumber","targetAccountNumber","setTargetAccountNumber","exchangeRates","setExchangeRates","accounts","setAccounts","invalidAmount","setInvalidAmount","insufficientFunds","setInsufficientFunds","sameAccountt","setSameAccount","invalidAccount","setInvalidAccount","cookies","JWT","push","claims","get","id","headers","then","res","data","accountNumber","catch","e","dateToday","Date","handleSubmit","preventDefault","validAmount","checkAmount","validAccount","checkAccount","sourceAccount","targetAccount","transfer","transferNumber","Math","floor","random","transferDescription","transferDate","sourceAccountId","targetAccountId","compra","venta","post","goBack","console","log","number","handleCancel","handleSourceAccount","event","target","value","handleDescription","handleAmount","handleTargetAccount","map","account","index","balance","currency"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useCookies } from 'react-cookie';\nimport { useHistory } from 'react-router-dom';\nimport validate from '../../utils/JWTParser';\nimport Navbar from '../../components/Navbar/Navbar';\nimport Axios from 'axios';\nimport './NewTransfer.scss';\nimport { format } from 'date-fns';\n\nconst NewTransfer = () => {\n\n    const history = useHistory();\n\n    const [description, setDescription] = useState(\"\");\n    const [amount, setAmount] = useState(\"\");\n    const [sourceAccountNumber, setSourceAccountNumber] = useState(\"\");\n    const [targetAccountNumber, setTargetAccountNumber] = useState(\"\");\n    const [exchangeRates, setExchangeRates] = useState({});\n\n    const [accounts, setAccounts] = useState([]);\n    const [invalidAmount, setInvalidAmount] = useState(false);\n    const [insufficientFunds, setInsufficientFunds] = useState(false);\n    const [sameAccountt, setSameAccount] = useState(false);\n    const [invalidAccount, setInvalidAccount] = useState(false);\n\n    const [cookies] = useCookies(['JWT']);\n\n    if (!validate(cookies.JWT)) {\n        history.push(\"/login\");\n    }\n\n    useEffect(() => {\n        const claims = validate(cookies.JWT);\n        if (claims) {\n            Axios.get(`http://localhost:8081/api/v1/account/byUserId/${claims.id}`, {\n                headers: { JWT: cookies.JWT }\n            }).then(res => {\n                const { data } = res;\n                setAccounts(data);\n                setSourceAccountNumber(data[0].accountNumber)\n            }).catch(e => {\n\n            });\n            let dateToday = new Date();\n            dateToday = format(dateToday, \"dd/MM/yyyy\");\n            Axios.get(`https://tipodecambio.paginasweb.cr/api/${dateToday}`)\n                .then(res => {\n                    const { data } = res;\n                    setExchangeRates(data);\n                });\n        }\n    }, [cookies]);\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        if (sourceAccountNumber !== targetAccountNumber) {\n            setSameAccount(false);\n            setInsufficientFunds(false);\n\n            const validAmount = checkAmount();\n            const validAccount = await checkAccount(targetAccountNumber);\n\n            if (!validAmount || !validAccount) {\n                validAmount ? setInvalidAmount(false) : setInvalidAmount(true);\n                validAccount ? setInvalidAccount(false) : setInvalidAccount(true);\n            } else {\n                const sourceAccount = await checkAccount(sourceAccountNumber);\n                const targetAccount = await checkAccount(targetAccountNumber);\n\n                const transfer = {\n                    transferNumber: Math.floor((Math.random() * 100000000) + 1000000000),\n                    transferDescription: description,\n                    amount: amount,\n                    transferDate: new Date(),\n                    sourceAccountId: sourceAccount.id,\n                    targetAccountId: targetAccount.id\n                }\n\n                const { compra, venta } = exchangeRates;\n\n                Axios.post(`http://localhost:8081/api/v1/transfer?buy=${compra}&sell=${venta}`, transfer, {\n                    headers: { JWT: cookies.JWT }\n                }).then(res => {\n                    history.goBack();\n                }).catch(e => {\n                    console.log(e);\n                    setInsufficientFunds(true);\n                });\n            }\n        } else {\n            setInvalidAccount(false);\n            setSameAccount(true);\n        }\n    }\n\n    const checkAmount = () => {\n        if (amount > 0) {\n            return true;\n        } else {\n            return false;\n        }\n    };\n\n    const checkAccount = async (number) => {\n        let res = await Axios.get(`http://localhost:8081/api/v1/account/${number}`, {\n            headers: {\n                JWT: cookies.JWT,\n            }\n        })\n        return res.data.accountNumber ? res.data : null;\n    };\n\n    const handleCancel = () => { history.goBack(); }\n\n    const handleSourceAccount = event => {\n        setSourceAccountNumber(event.target.value);\n    };\n\n    const handleDescription = event => {\n        setDescription(event.target.value);\n    };\n\n    const handleAmount = event => {\n        setAmount(event.target.value);\n    };\n\n    const handleTargetAccount = event => {\n        setTargetAccountNumber(event.target.value);\n    };\n\n    return (\n        <div className=\"wrapper\">\n            <div id=\"content\">\n                <Navbar />\n                <div className=\"block-section container\">\n                    <div className=\"block-section-header\">\n                        <h3 className=\"block-section-header-text\">New Transfer</h3>\n                    </div>\n                    <form onSubmit={handleSubmit}>\n                        <div className=\"form-group\">\n                            <label>Source Account</label>\n                            <select className=\"form-control\" id=\"source-account\" onChange={handleSourceAccount}>\n                                {accounts.map((account, index) => {\n                                    if (index === 0) {\n                                        return <option key={account.id} value={account.accountNumber} selected>\n                                            {account.accountNumber + \" - \" + account.balance + \" \" + account.currency}\n                                        </option>;\n                                    } else {\n                                        return <option key={account.id} value={account.accountNumber}>\n                                            {account.accountNumber + \" - \" + account.balance + \" \" + account.currency}\n                                        </option>;\n                                    }\n                                })}\n                            </select>\n\n                        </div>\n                        <div className=\"form-group\">\n                            <label>Description</label>\n                            <input className=\"form-control\" type=\"text\" required onChange={handleDescription} />\n                        </div>\n                        <div className=\"form-group\">\n                            <label>Amount</label>\n                            <input className=\"form-control\" type=\"number\" required step=\"0.01\" onChange={handleAmount} />\n                            <small id=\"passwordHelpBlock\" className=\"form-text text-muted\">\n                                The amount has to be specified in the source account currency.\n                            </small>\n                            {invalidAmount &&\n                                <div className=\"invalid-entry\">You have to specify an amount greater than zero.</div>\n                            }\n                            {insufficientFunds &&\n                                <div className=\"invalid-entry\">You have insufficient Funds.</div>\n                            }\n                        </div>\n                        <div className=\"form-group\">\n                            <label>Target Account</label>\n                            <input className=\"form-control\" type=\"text\" required onChange={handleTargetAccount} />\n                            {invalidAccount &&\n                                <div className=\"invalid-entry\">This account doesn't exist.</div>\n                            }\n                            {sameAccountt &&\n                                <div className=\"invalid-entry\">You can't transfer funds to the same account.</div>\n                            }\n                        </div>\n                        <button type=\"cancel\" className=\"btn btn-danger\" onClick={handleCancel}>Cancel</button>\n                        <button type=\"submit\" className=\"btn btn-success\">Transfer</button>\n\n                    </form>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default NewTransfer;"]},"metadata":{},"sourceType":"module"}