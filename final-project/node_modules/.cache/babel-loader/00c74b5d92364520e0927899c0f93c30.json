{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/web-dev-program/week 7/final-project/src/components/PaymentsChart/PaymentsChart.js\";\nimport React, { useState, useEffect } from 'react';\nimport { useCookies } from 'react-cookie';\nimport { useHistory } from 'react-router-dom';\nimport validate from '../../utils/JWTParser';\nimport Chart from 'chart.js';\n\nconst PaymentsChart = props => {\n  const history = useHistory();\n  const {\n    serviceTypes,\n    services,\n    payments,\n    chartId,\n    isBar\n  } = props;\n  const [cookies] = useCookies(['JWT']);\n\n  if (!validate(cookies.JWT)) {\n    history.push(\"/login\");\n  }\n\n  useEffect(() => {\n    if (serviceTypes) {\n      let valuesCRC = [serviceTypes.length];\n      let titles = [serviceTypes.length];\n\n      for (var i = 0; i < serviceTypes.length; i++) {\n        valuesCRC[i] = 0;\n        titles[i] = serviceTypes[i].serviceTypeName;\n      }\n\n      let paymentsInCRC = [];\n      let paymentsInUSD = [];\n\n      if (payments) {\n        paymentsInCRC = payments.filter(payment => payment.currency === \"CRC\");\n        paymentsInUSD = payments.filter(payment => payment.currency === \"USD\");\n\n        if (paymentsInCRC && paymentsInCRC.length) {\n          for (var j = 0; j < paymentsInCRC.length; j++) {\n            let payment = paymentsInCRC[j];\n            let amount = parseFloat(payment.amount);\n            let serviceTypeId = services.filter(service => payment.serviceId === service.id);\n            serviceTypeId = serviceTypeId[0];\n\n            if (serviceTypeId) {\n              serviceTypeId = serviceTypeId.serviceTypeId;\n              valuesCRC[serviceTypeId - 1] = valuesCRC[serviceTypeId - 1] + amount;\n            }\n          }\n        }\n      }\n\n      var context = document.getElementById(chartId);\n      let options = isBar ? {\n        scales: {\n          yAxes: [{\n            ticks: {\n              beginAtZero: true\n            }\n          }]\n        }\n      } : {};\n      var myChart = new Chart(context, {\n        type: 'doughnut',\n        data: {\n          labels: titles,\n          datasets: [{\n            label: '# of Votes',\n            data: valuesCRC,\n            backgroundColor: ['rgba(255, 99, 132, 0.5)', 'rgba(54, 162, 235, 0.5)', 'rgba(255, 206, 86, 0.5)', 'rgba(75, 192, 192, 0.5)', 'rgba(153, 102, 255, 0.5)', 'rgba(255, 159, 64, 0.5)'],\n            borderColor: ['rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)', 'rgba(75, 192, 192, 1)', 'rgba(153, 102, 255, 1)', 'rgba(255, 159, 64, 1)'],\n            borderWidth: 1\n          }]\n        },\n        options: options\n      });\n    }\n  }, [chartId, isBar, payments, serviceTypes, services, cookies]);\n  return React.createElement(\"canvas\", {\n    id: chartId,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  });\n};\n\nexport default PaymentsChart;","map":{"version":3,"sources":["/Users/user/Desktop/web-dev-program/week 7/final-project/src/components/PaymentsChart/PaymentsChart.js"],"names":["React","useState","useEffect","useCookies","useHistory","validate","Chart","PaymentsChart","props","history","serviceTypes","services","payments","chartId","isBar","cookies","JWT","push","valuesCRC","length","titles","i","serviceTypeName","paymentsInCRC","paymentsInUSD","filter","payment","currency","j","amount","parseFloat","serviceTypeId","service","serviceId","id","context","document","getElementById","options","scales","yAxes","ticks","beginAtZero","myChart","type","data","labels","datasets","label","backgroundColor","borderColor","borderWidth"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useCookies } from 'react-cookie';\nimport { useHistory } from 'react-router-dom';\nimport validate from '../../utils/JWTParser';\nimport Chart from 'chart.js';\n\nconst PaymentsChart = (props) => {\n\n    const history = useHistory();\n\n    const { serviceTypes, services, payments, chartId, isBar } = props;\n\n    const [cookies] = useCookies(['JWT']);\n\n    if (!validate(cookies.JWT)) {\n        history.push(\"/login\");\n    }\n\n    useEffect(() => {\n        if (serviceTypes) {\n            let valuesCRC = [serviceTypes.length];\n            let titles = [serviceTypes.length];\n            for (var i = 0; i < serviceTypes.length; i++) {\n                valuesCRC[i] = 0;\n                titles[i] = serviceTypes[i].serviceTypeName;\n            }\n            let paymentsInCRC = [];\n            let paymentsInUSD = [];\n            if (payments) {\n                paymentsInCRC = payments.filter((payment) => payment.currency === \"CRC\");\n                paymentsInUSD = payments.filter((payment) => payment.currency === \"USD\");\n\n                if (paymentsInCRC && paymentsInCRC.length) {\n                    for (var j = 0; j < paymentsInCRC.length; j++) {\n                        let payment = paymentsInCRC[j];\n                        let amount = parseFloat(payment.amount);\n                        let serviceTypeId = services.filter((service) => payment.serviceId === service.id);\n                        serviceTypeId = serviceTypeId[0];\n                        if (serviceTypeId) {\n                            serviceTypeId = serviceTypeId.serviceTypeId;\n                            valuesCRC[serviceTypeId - 1] = valuesCRC[serviceTypeId - 1] + amount;\n                        }\n                    }\n                }\n            }\n\n            var context = document.getElementById(chartId);\n            let options = isBar ? { scales: { yAxes: [{ ticks: { beginAtZero: true } }] } } : {};\n            var myChart = new Chart(context, {\n                type: 'doughnut',\n                data: {\n                    labels: titles,\n                    datasets: [{\n                        label: '# of Votes',\n                        data: valuesCRC,\n                        backgroundColor: [\n                            'rgba(255, 99, 132, 0.5)',\n                            'rgba(54, 162, 235, 0.5)',\n                            'rgba(255, 206, 86, 0.5)',\n                            'rgba(75, 192, 192, 0.5)',\n                            'rgba(153, 102, 255, 0.5)',\n                            'rgba(255, 159, 64, 0.5)'\n                        ],\n                        borderColor: [\n                            'rgba(255, 99, 132, 1)',\n                            'rgba(54, 162, 235, 1)',\n                            'rgba(255, 206, 86, 1)',\n                            'rgba(75, 192, 192, 1)',\n                            'rgba(153, 102, 255, 1)',\n                            'rgba(255, 159, 64, 1)'\n                        ],\n                        borderWidth: 1\n                    }]\n                },\n                options: options\n            });\n        }\n\n\n\n\n    }, [chartId, isBar, payments, serviceTypes, services, cookies]);\n\n    return (\n        <canvas id={chartId}></canvas>\n    );\n\n}\n\nexport default PaymentsChart;"]},"metadata":{},"sourceType":"module"}