{"ast":null,"code":"const axios = require('axios').default;\n/**\n * @author Caleb Lemoine\n * @param {object} opts easy-soap-request options\n * @param {string} opts.url endpoint URL\n * @param {object} opts.headers  HTTP headers, can be string or object\n * @param {string} opts.xml SOAP envelope, can be read from file or passed as string\n * @param {int} opts.timeout Milliseconds before timing out request\n * @param {object} opts.proxy Object with proxy configuration\n * @param {int} opts.maxContentLength Limit content/body size being sent(bytes)\n * @param {object} opts.extraOpts Object of additional axios parameters\n * @promise response\n * @reject {error}\n * @fulfill {body,statusCode}\n * @returns {Promise.response{body,statusCode}}\n */\n\n\nmodule.exports = function soapRequest(opts = {\n  url: '',\n  headers: {},\n  xml: '',\n  timeout: 10000,\n  proxy: {},\n  maxContentLength: Infinity,\n  extraOpts: {}\n}) {\n  const {\n    url,\n    headers,\n    xml,\n    timeout,\n    proxy,\n    maxContentLength,\n    extraOpts\n  } = opts;\n  return new Promise((resolve, reject) => {\n    axios({\n      method: 'post',\n      url,\n      headers,\n      data: xml,\n      timeout,\n      proxy,\n      maxContentLength,\n      ...extraOpts\n    }).then(response => {\n      resolve({\n        response: {\n          headers: response.headers,\n          body: response.data,\n          statusCode: response.status\n        }\n      });\n    }).catch(error => {\n      if (error.response) {\n        console.error(`SOAP FAIL: ${error}`);\n        reject(error.response.data);\n      } else {\n        console.error(`SOAP FAIL: ${error}`);\n        reject(error);\n      }\n    });\n  });\n};","map":{"version":3,"sources":["/Users/user/Desktop/web-dev-program/week 7/final-project/node_modules/easy-soap-request/index.js"],"names":["axios","require","default","module","exports","soapRequest","opts","url","headers","xml","timeout","proxy","maxContentLength","Infinity","extraOpts","Promise","resolve","reject","method","data","then","response","body","statusCode","status","catch","error","console"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiBC,OAA/B;AAEA;;;;;;;;;;;;;;;;;AAeAC,MAAM,CAACC,OAAP,GAAiB,SAASC,WAAT,CAAqBC,IAAI,GAAG;AAC3CC,EAAAA,GAAG,EAAE,EADsC;AAE3CC,EAAAA,OAAO,EAAE,EAFkC;AAG3CC,EAAAA,GAAG,EAAE,EAHsC;AAI3CC,EAAAA,OAAO,EAAE,KAJkC;AAK3CC,EAAAA,KAAK,EAAE,EALoC;AAM3CC,EAAAA,gBAAgB,EAAEC,QANyB;AAO3CC,EAAAA,SAAS,EAAE;AAPgC,CAA5B,EAQd;AACD,QAAM;AACJP,IAAAA,GADI;AAEJC,IAAAA,OAFI;AAGJC,IAAAA,GAHI;AAIJC,IAAAA,OAJI;AAKJC,IAAAA,KALI;AAMJC,IAAAA,gBANI;AAOJE,IAAAA;AAPI,MAQFR,IARJ;AASA,SAAO,IAAIS,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCjB,IAAAA,KAAK,CAAC;AACJkB,MAAAA,MAAM,EAAE,MADJ;AAEJX,MAAAA,GAFI;AAGJC,MAAAA,OAHI;AAIJW,MAAAA,IAAI,EAAEV,GAJF;AAKJC,MAAAA,OALI;AAMJC,MAAAA,KANI;AAOJC,MAAAA,gBAPI;AAQJ,SAAGE;AARC,KAAD,CAAL,CASGM,IATH,CASSC,QAAD,IAAc;AACpBL,MAAAA,OAAO,CAAC;AACNK,QAAAA,QAAQ,EAAE;AACRb,UAAAA,OAAO,EAAEa,QAAQ,CAACb,OADV;AAERc,UAAAA,IAAI,EAAED,QAAQ,CAACF,IAFP;AAGRI,UAAAA,UAAU,EAAEF,QAAQ,CAACG;AAHb;AADJ,OAAD,CAAP;AAOD,KAjBD,EAiBGC,KAjBH,CAiBUC,KAAD,IAAW;AAClB,UAAIA,KAAK,CAACL,QAAV,EAAoB;AAClBM,QAAAA,OAAO,CAACD,KAAR,CAAe,cAAaA,KAAM,EAAlC;AACAT,QAAAA,MAAM,CAACS,KAAK,CAACL,QAAN,CAAeF,IAAhB,CAAN;AACD,OAHD,MAGO;AACLQ,QAAAA,OAAO,CAACD,KAAR,CAAe,cAAaA,KAAM,EAAlC;AACAT,QAAAA,MAAM,CAACS,KAAD,CAAN;AACD;AACF,KAzBD;AA0BD,GA3BM,CAAP;AA4BD,CA9CD","sourcesContent":["const axios = require('axios').default;\n\n/**\n * @author Caleb Lemoine\n * @param {object} opts easy-soap-request options\n * @param {string} opts.url endpoint URL\n * @param {object} opts.headers  HTTP headers, can be string or object\n * @param {string} opts.xml SOAP envelope, can be read from file or passed as string\n * @param {int} opts.timeout Milliseconds before timing out request\n * @param {object} opts.proxy Object with proxy configuration\n * @param {int} opts.maxContentLength Limit content/body size being sent(bytes)\n * @param {object} opts.extraOpts Object of additional axios parameters\n * @promise response\n * @reject {error}\n * @fulfill {body,statusCode}\n * @returns {Promise.response{body,statusCode}}\n */\nmodule.exports = function soapRequest(opts = {\n  url: '',\n  headers: {},\n  xml: '',\n  timeout: 10000,\n  proxy: {},\n  maxContentLength: Infinity,\n  extraOpts: {},\n}) {\n  const {\n    url,\n    headers,\n    xml,\n    timeout,\n    proxy,\n    maxContentLength,\n    extraOpts,\n  } = opts;\n  return new Promise((resolve, reject) => {\n    axios({\n      method: 'post',\n      url,\n      headers,\n      data: xml,\n      timeout,\n      proxy,\n      maxContentLength,\n      ...extraOpts,\n    }).then((response) => {\n      resolve({\n        response: {\n          headers: response.headers,\n          body: response.data,\n          statusCode: response.status,\n        },\n      });\n    }).catch((error) => {\n      if (error.response) {\n        console.error(`SOAP FAIL: ${error}`);\n        reject(error.response.data);\n      } else {\n        console.error(`SOAP FAIL: ${error}`);\n        reject(error);\n      }\n    });\n  });\n};\n"]},"metadata":{},"sourceType":"script"}